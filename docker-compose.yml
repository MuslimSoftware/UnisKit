version: '3.8'

services:
  backend:
    build: ./backend
    container_name: uniskit-backend
    ports:
      - "${PORT}:8000" # Map host port 8000 to container port 8000
    env_file:
      - ./backend/.env
    volumes:
      # Mount local code for development (optional: enables hot-reloading if uvicorn is configured)
      # For production, you might remove this volume mount
      - ./backend:/app
    environment:
      # --- Application Environment Variables ---
      # Point to the Redis service defined below
      REDIS_HOST: redis
      REDIS_PORT: 6379 # Default Redis port
      REDIS_DB: 0

      # --- Security (IMPORTANT: Use environment variables or Docker secrets for production) ---
      SECRET_KEY: "${SECRET_KEY}" # Change this!
      JWT_SECRET_KEY: "${JWT_SECRET_KEY}" # Change this!
      # Add other necessary env vars from your .env or env.py defaults if needed
      MONGODB_URL: "${MONGODB_URL}" # Example if using MongoDB
      MONGODB_DB_NAME: "${MONGODB_DB_NAME}" # Example if using MongoDB

      # --- FastAPI/Uvicorn Settings ---
      # These might match defaults in your env.py, but can be set here
      HOST: "${HOST}"
      PORT: "${PORT}"
    depends_on:
      - redis # Ensures Redis starts before the backend service attempts to connect
    # If using Uvicorn's reload for development, you can override the CMD
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  redis:
    image: redis:7-alpine # Use a specific Redis image version (Alpine is smaller)
    container_name: uniskit-redis
    ports:
      # Optional: Expose Redis port to the host for debugging/tools like RedisInsight
      # Remove if you don't need direct access from your host machine
      # - "6379:6379"
    volumes:
      # Persist Redis data across container restarts
      - redis_data:/data

volumes:
  # Define the named volume for Redis data persistence
  redis_data: