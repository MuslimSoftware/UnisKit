---
description: 
globs: frontend/**
alwaysApply: false
---
 # Frontend Architecture (Expo / React Native - Mobile & Web)

This document outlines the architecture of the **cross-platform (iOS, Android, Web)** Expo/React Native frontend application.

## Project Structure Overview

The frontend code is primarily located within the `frontend/src/` directory. It leverages **Expo** and **React Native** to build for both native mobile platforms and the web simultaneously. Key configuration files (`app.config.ts`, `babel.config.js`, `.env`, `tsconfig.json`) reside in the `frontend/` root.

```
frontend/
├── src/
│   ├── api/          # API client logic (e.g., Axios instance, request functions)
│   ├── app/          # Application entry point, routing (Expo Router), global layout
│   ├── assets/       # Static assets (images, fonts)
│   ├── config/       # Configuration logic (env variables, settings)
│   ├── features/     # Feature-based modules
│   │   ├── auth/       # Auth-specific screens, components, hooks
│   │   ├── settings/   # Settings-specific screens, components, hooks
│   │   ├── ...         # Other features
│   │   └── shared/     # Reusable components, hooks, themes, utils across features
│   │       ├── components/ # Base UI components (Buttons, Inputs, Cards, etc.)
│   │       ├── hooks/      # Reusable hooks (e.g., useTheme, useApi)
│   │       ├── theme/      # Theme definitions (colors, typography, spacing)
│   │       └── utils/      # Utility functions
│   └── ...
├── .env              # Environment variables (local)
├── .env.example      # Example environment variables
├── app.config.ts     # Expo app configuration
├── package.json      # Project dependencies and scripts
└── tsconfig.json     # TypeScript configuration
```

## Key Architectural Areas

1.  **Application Setup & Routing (`src/app/`)**
    *   Manages the application's entry point and navigation structure using Expo Router.
    *   The root layout (`src/app/_layout.tsx`) is crucial for setting up global contexts and providers (e.g., Theme Provider, Authentication Provider, Query Client Provider).
    *   Defines different navigation stacks or groups (e.g., `(auth)`, `(main)`, `(stack)`).

2.  **Feature Modules (`src/features/`)**
    *   Code is organized by application feature (e.g., `auth`, `settings`).
    *   Each feature directory typically contains its own screens, specific components, and hooks relevant only to that feature.

3.  **Shared Logic & Components (`src/features/shared/`)**
    *   **Components (`src/features/shared/components/`):** Contains fundamental, reusable UI components (e.g., `Button`, `TextInput`, `Card`, `Layout`). These components form the base of the UI library and should be styled according to the application theme.
    *   **Hooks (`src/features/shared/hooks/`):** Holds custom hooks that encapsulate reusable logic (e.g., state management related to theme, API interactions, device info).
    *   **Theme (`src/features/shared/theme/`):** Defines the application's visual theme, including color palettes, typography scales, spacing units, etc. This is often consumed by a Theme Provider set up in `src/app/_layout.tsx`.
    *   **Utilities (`src/features/shared/utils/`):** General-purpose helper functions.

4.  **API Client (`src/api/`)**
    *   Centralizes all logic related to backend communication.
    *   Typically includes:
        *   An initialized API client instance (e.g., Axios) with base URL, interceptors for handling auth tokens or errors.
        *   Functions or classes that define specific API requests (e.g., `fetchUserProfile`, `loginUser`).
        *   Type definitions for API request payloads and responses.

5.  **Configuration (`src/config/` & Root Files)**
    *   Handles application configuration, primarily environment variables.
    *   Logic in `src/config/` might involve loading variables from `.env` (using libraries like `dotenv` or Expo's mechanisms) and potentially validating them (e.g., using Zod).
    *   `app.config.ts` in the root defines build-time configurations specific to Expo.

## Important Conventions

*   **Theme Hook Usage (`useTheme`):**
    *   The primary theme hook (e.g., `useTheme` provided by a styling library or a custom one located in `src/features/shared/hooks/`) should **predominantly be used within the base components** located in `src/features/shared/components/`.
    *   Avoid calling `useTheme` directly in feature-specific components or screens whenever possible. Instead, build feature components by composing the themed base components from `src/features/shared/components/`.
    *   **Rationale:** This prevents redundant theme access calls throughout the app, centralizes theme-dependent styling in the base components, and makes refactoring themes much easier. Feature components become simpler as they primarily deal with layout and logic, relying on the pre-styled base components.

*   **Centralized Logic:** Before implementing new shared functionality (API calls, utility functions, configuration access, base components), always check the `src/api/`, `src/features/shared/`, and `src/config/` directories first to promote reuse and avoid duplication.

*   **Cross-Platform Development (Mobile & Web):**
    *   **Goal:** Maintain a single codebase for iOS, Android, and Web while handling platform-specific UI or logic gracefully.
    *   **Platform-Specific Files:** When significant differences exist between mobile and web implementations for a component or hook, use platform-specific file extensions:
        *   `MyComponent.tsx` (for iOS and Android)
        *   `MyComponent.web.tsx` (for Web)
        *   Import using `import MyComponent from './MyComponent';` - Metro/Webpack will resolve the correct file based on the target platform.
    *   **Abstraction Layers:** Avoid littering components with `if (Platform.OS === 'web') { ... } else { ... }` checks. Instead:
        *   Use the platform-specific file approach described above.
        *   Create abstraction hooks or utility functions within `src/features/shared/` that encapsulate platform differences. For example, a `usePlatformNavigation()` hook might handle navigation differently on web vs. mobile.
        *   Utilize cross-platform UI libraries or component primitives that handle differences internally.
    *   **Consideration:** Always test new components and features on *all* target platforms (iOS, Android, Web) during development. 