---
description: 
globs: 
alwaysApply: true
---
# Coding Practices

This document outlines the recommended coding practices and conventions for this project to ensure code quality, consistency, and maintainability.

## General Principles

*   **Readability:** Write clear, concise, and self-explanatory code. Prioritize readability over excessive cleverness.
*   **Simplicity (KISS):** Keep It Simple, Stupid. Avoid unnecessary complexity.
*   **Don't Repeat Yourself (DRY):** Avoid duplicating code. Use functions, classes, and modules to encapsulate reusable logic.
*   **Consistency:** Follow established patterns and conventions throughout the codebase.

## Module Standardization and Reuse

*   **Standardized Modules:** Aim to create well-defined, standardized modules with clear responsibilities.
*   **Search Before Creating:** Before implementing new configurations, utility functions, or centralized logic (e.g., error handling, data validation schemas), thoroughly search the existing codebase.
*   **Reuse Existing Logic:** Prioritize reusing existing modules, configurations, or patterns whenever possible. This minimizes redundancy, reduces the need for future refactoring, and maintains consistency.
*   **Centralize Common Logic:** If similar logic is needed in multiple places, centralize it into a shared module or service.

## Development Practices

1.  **Language Style Guide:**
    *   Adhere strictly to the idiomatic style guide for the programming language being used (e.g., PEP 8 for Python).
    *   Utilize linters and formatters to automatically enforce style consistency. Configure your IDE accordingly.

2.  **Static Typing & Data Validation:**
    *   Where supported by the language, use static type hints for function signatures, variables, etc., to improve clarity and enable static analysis.
    *   Employ robust data validation mechanisms (e.g., using libraries like Pydantic for Python, or built-in language features) for data structures, especially at API boundaries.

3.  **Dependency Management:**
    *   Utilize dependency injection frameworks or patterns where available to manage dependencies (e.g., database connections, service instances).
    *   This promotes loose coupling and improves testability.

4.  **Asynchronous Operations:**
    *   Handle I/O-bound operations (database calls, network requests) asynchronously where appropriate using language/framework features (e.g., `async`/`await`).
    *   Ensure blocking operations do not hinder the performance of asynchronous code.

5.  **Error Handling:**
    *   Follow a consistent error handling strategy, such as the exception-based flow outlined in `architecture.mdc`.
    *   Use specific, descriptive errors or exceptions.
    *   Implement centralized handlers to translate errors into appropriate responses (e.g., HTTP status codes for APIs).
    *   Avoid catching overly broad exceptions.

6.  **Testing:**
    *   Write unit tests for individual components.
    *   Write integration tests to verify interactions between different parts of the system.
    *   Use appropriate testing tools and frameworks provided by the language or platform.
    *   Strive for meaningful test coverage.
    *   Employ fixtures or setup/teardown mechanisms for managing test state and dependencies.

7.  **Logging:**
    *   Utilize standard logging libraries provided by the language or framework.
    *   Configure logging levels, formats, and outputs appropriately for different environments.
    *   Log important events, errors, and contextual information for debugging and monitoring.

8.  **Configuration Management:**
    *   Externalize configuration (database credentials, API keys, feature flags) using environment variables, configuration files, or dedicated configuration services.
    *   Never hardcode sensitive information or environment-specific settings directly in the code.

9.  **API Design (If Applicable):**
    *   Follow established API design principles (e.g., RESTful conventions).
    *   Define clear contracts/schemas for requests and responses.
    *   Keep endpoints focused and resource-oriented.

10. **Security:**
    *   Implement robust authentication and authorization.
    *   Validate and sanitize all external input to prevent injection vulnerabilities.
    *   Be aware of common security risks (e.g., OWASP Top 10) and mitigate them.
    *   Use secure communication protocols (e.g., HTTPS).
    *   Keep software dependencies up-to-date.

11. **Code Comments:**
    *   Focus comments on the *why* behind a piece of code, not the *what*. The code itself should clearly express *what* it does. Add comments only when the reasoning or logic is not immediately obvious from the code.
    *   Avoid temporary comments (e.g., `// TODO: Fix this later`) unless they are actively tracked in an issue management system and have a clear plan for resolution. Stale comments add noise and reduce maintainability.
    *   Use standard documentation comment formats (e.g., docstrings) for modules, classes, and functions. 
    
12. **Code Hygiene:**
    *   Regularly remove unused variables, imports, functions, and commented-out code blocks.
    *   Eliminate redundant comments that restate obvious code logic. Tools like linters can often help identify unused code.